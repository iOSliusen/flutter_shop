// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
import 'package:flutter_shop/Business/Cover/Model/i_t_home_cover_entity.dart';
import 'package:flutter_shop/generated/json/i_t_home_cover_entity_helper.dart';
import 'package:flutter_shop/Business/Lapin/lapinlist_entity.dart';
import 'package:flutter_shop/generated/json/lapinlist_entity_helper.dart';

class JsonConvert<T> {
	T fromJson(Map<String, dynamic> json) {
		return _getFromJson<T>(runtimeType, this, json);
	}

  Map<String, dynamic> toJson() {
		return _getToJson<T>(runtimeType, this);
  }

  static _getFromJson<T>(Type type, data, json) {
    switch (type) {
			case ITHomeCoverEntity:
				return iTHomeCoverEntityFromJson(data as ITHomeCoverEntity, json) as T;
			case LapinlistEntity:
				return lapinlistEntityFromJson(data as LapinlistEntity, json) as T;
			case LapinlistLapinlist:
				return lapinlistLapinlistFromJson(data as LapinlistLapinlist, json) as T;    }
    return data as T;
  }

  static _getToJson<T>(Type type, data) {
		switch (type) {
			case ITHomeCoverEntity:
				return iTHomeCoverEntityToJson(data as ITHomeCoverEntity);
			case LapinlistEntity:
				return lapinlistEntityToJson(data as LapinlistEntity);
			case LapinlistLapinlist:
				return lapinlistLapinlistToJson(data as LapinlistLapinlist);
			}
			return data as T;
		}
  //Go back to a single instance by type
	static _fromJsonSingle<M>( json) {
		String type = M.toString();
		if(type == (ITHomeCoverEntity).toString()){
			return ITHomeCoverEntity().fromJson(json);
		}	else if(type == (LapinlistEntity).toString()){
			return LapinlistEntity().fromJson(json);
		}	else if(type == (LapinlistLapinlist).toString()){
			return LapinlistLapinlist().fromJson(json);
		}	
		return null;
	}

  //list is returned by type
	static M _getListChildType<M>(List data) {
		if(<ITHomeCoverEntity>[] is M){
			return data.map<ITHomeCoverEntity>((e) => ITHomeCoverEntity().fromJson(e)).toList() as M;
		}	else if(<LapinlistEntity>[] is M){
			return data.map<LapinlistEntity>((e) => LapinlistEntity().fromJson(e)).toList() as M;
		}	else if(<LapinlistLapinlist>[] is M){
			return data.map<LapinlistLapinlist>((e) => LapinlistLapinlist().fromJson(e)).toList() as M;
		}
		throw Exception("not fond");
	}

  static M fromJsonAsT<M>(json) {
    if (json is List) {
      return _getListChildType<M>(json);
    } else {
      return _fromJsonSingle<M>(json) as M;
    }
  }
}